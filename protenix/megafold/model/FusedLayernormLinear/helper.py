# Autotuned configs for NVIDIA gpus (A100, H100, etc.)

DEFAULT_CONFIG = (16, 16, 16, 8, 1, 8, 255) 

common_inputs = {    
    # SMALL INPUTS: 
    # (384, 128, 384): ((32, 32, 32, 4, 2, 4, 128), (128, 16, 32, 4, 4, 8, 168)),    
    # (384, 512, 64): ((64, 64, 16, 4, 2, 4, 168), (16, 16, 32, 4, 4, 8, 96)),    
    # (768, 512, 64): ((64, 64, 16, 4, 2, 4, 255), (32, 16, 32, 4, 4, 8, 96)),
    # (384, 384, 384): ((32, 64, 16, 8, 4, 4, 255), (128, 16, 32, 8, 4, 8, 196)),

    # (384, 128, 768): ((32, 32, 32, 4, 4, 4, 255), (128, 16, 32, 4, 4, 8, 96)),
    # (1536, 128, 768): ((32, 64, 16, 4, 2, 4, 168), (128, 32, 32, 4, 4, 4, 196)),
    
    # (384, 128, 801): ((32, 64, 32, 4, 2, 8, 168), (128, 16, 32, 4, 4, 8, 96)),
    # (1536, 128, 801): ((32, 64, 32, 4, 2, 8, 168), (128, 32, 32, 4, 4, 4, 196)),
    
    # (384, 768, 801): ((32, 64, 16, 4, 4, 4, 255), (128, 16, 32, 4, 4, 8, 128)),
    # (1536, 768, 801): ((64, 128, 16, 8, 2, 8, 128), (128, 32, 32, 4, 4, 4, 128)),
    
    # (384, 64, 64): ((32, 32, 32, 4, 4, 4, 128), (16, 16, 32, 4, 4, 8, 96)),
    # (768, 64, 64): ((32, 32, 32, 4, 2, 4, 168), (32, 16, 32, 4, 4, 8, 96)),
    # (1536, 64, 64): ((32, 32, 32, 8, 2, 4, 96), (64, 16, 32, 8, 4, 8, 196)),
    # (6144, 64, 64): ((64, 64, 32, 4, 4, 4, 168), (128, 16, 32, 8, 4, 8, 128)),
    
    # for adaln: 
    # (250, 1536, 801): ((32, 64, 32, 4, 2, 8, 96), (128, 16, 32, 4, 4, 8, 96)),
    # (500, 1536, 801): ((64, 64, 32, 4, 2, 8, 96), (128, 16, 32, 4, 4, 8, 128)),
    # (750, 1536, 801): ((32, 64, 16, 4, 2, 4, 128), (128, 16, 32, 4, 4, 4, 168)),
    # (1000, 1536, 801): ((32, 256, 32, 8, 2, 8, 128), (128, 32, 32, 4, 4, 8, 196)),
    # (1250, 1536, 801): ((32, 128, 16, 4, 4, 4, 96), (128, 16, 32, 4, 2, 4, 96)),
    # (1536, 1536, 801): ((64, 256, 32, 8, 2, 8, 128), (128, 32, 32, 4, 4, 4, 128)),

    ### LARGE INPUTS: 
    (147456, 8, 128): ((128, 32, 32, 8, 4, 8, None), (64, 64, 16, 8, 4, 8, None)),  
    (147456, 16, 128): ((128, 32, 32, 4, 4, 8, None), (64, 64, 16, 8, 2, 4, None)),  
    (147456, 64, 128): ((64, 64, 32, 8, 4, 4, None), (128, 64, 32, 8, 4, 4, None)),
    (147456, 128, 128): ((64, 128, 32, 8, 4, 4, None), (128, 64, 32, 8, 4, 4, None)), 
    
    (147456, 64, 64): ((64, 64, 16, 4, 2, 4, 255), (128, 16, 16, 8, 4, 4, 168)),
    (589824, 64, 64): ((64, 64, 32, 8, 2, 4, 96), (128, 16, 16, 8, 4, 4, 168)), 
    
    (147456, 512, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 32, 4, 4, 4, 255)), 
    (147456, 512, 128): ((64, 256, 32, 4, 4, 4, 255), (256, 32, 32, 4, 2, 4, 255)), 
    (147456, 1024, 128): ((128, 128, 32, 8, 4, 8, 128), (256, 64, 32, 4, 2, 8, 128)), 
    
    # trianglemult
    (147456, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)),
    # (147456, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 8, 2, 8, 128)),
    
    (147456, 320, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 16, 4, 4, 8, 128)), 
    (147456, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)), 
}

# Structured (N, K) map logic  # (N, K) -> [m_list]
m_list_for_nk = {
    ### SMALL INPUTS: 
    # atom_seq_len, which varies a lot 
    # (3, 128):  [2000, 2500, 2943, 3500,    8000, 10000, 11772, 14000, 18000, 24000, 28000], 
    # (32, 128): [2000, 2500, 2943, 3500,    8000, 10000, 11772, 14000, 18000, 24000, 28000], 
    # (256, 128): [2000, 2500, 2827, 3500,    8000, 10000, 11308, 14000, 18000, 24000, 28000], # for adaln

    ### LARGE INPUTS:
    # n^2: 
    (8, 128): [60000, 80000, 100000, 120000, 147456],
    (64, 128): [60000, 80000, 100000, 120000, 147456],
    (128, 128): [60000, 80000, 100000, 120000, 147456],
    (64, 64): [60000, 80000, 100000, 120000, 147456, 589824], 
    
    (512, 64): [40000, 60000, 80000, 100000, 120000, 147456],
    (512, 128): [40000, 60000, 80000, 100000, 120000, 147456],
    (1024, 128): [40000, 60000, 80000, 100000, 120000, 147456],
    
    (516, 64): [40000, 60000, 80000, 100000, 120000, 147456],
    # (516, 128): [40000, 60000, 80000, 100000, 120000, 147456],
    (320, 64): [60000, 80000, 100000, 120000, 147456],
    (640, 128): [60000, 80000, 100000, 120000, 147456],
    
    # second shape of pairwise_repr, 27 * 54 * (40, 55, 70, 85, 95, 109, 120, 130) varies a lot 
    (16, 128): [60000, 80000, 100000, 120000, 123930, 138510, 147456, 158922, 174960, 189540, 233280, 320760, 408240,       495720, 554040, 635688, 699840, 758160],
    (4, 16): [58320, 80190, 102060, 123930, 138510, 158922, 174960, 189540, 233280, 320760, 408240,   495720, 554040, 635688, 699840, 758160], 
}


structured_maps = {
    ### SMALL INPUTS: 
    # (2000, 3, 128): ((32, 32, 32, 4, 4, 8, 168), (64, 16, 16, 4, 2, 8, 255)), 
    # (2500, 3, 128): ((32, 32, 32, 4, 2, 8, 128), (64, 16, 16, 8, 4, 8, 255)), 
    # (2943, 3, 128): ((32, 32, 32, 8, 2, 4, 255), (128, 16, 16, 4, 2, 8, 96)), 
    # (3500, 3, 128): ((32, 32, 32, 8, 4, 8, 168), (64, 16, 16, 4, 2, 4, 96)), 
    # (8000, 3, 128): ((32, 32, 32, 4, 2, 8, 96), (64, 32, 16, 8, 2, 4, 96)), 
    # (10000, 3, 128): ((32, 32, 32, 4, 2, 8, 255), (128, 32, 16, 8, 2, 4, 168)), 
    # (11772, 3, 128): ((64, 32, 16, 8, 2, 4, 168), (128, 64, 16, 4, 2, 8, 128)), 
    # (14000, 3, 128): ((64, 32, 32, 8, 4, 8, 255), (64, 32, 16, 4, 2, 4, 96)), 
    # (18000, 3, 128): ((64, 32, 32, 4, 2, 8, 128), (128, 32, 16, 4, 2, 8, 128)), 
    # (24000, 3, 128): ((64, 32, 32, 4, 2, 8, 96), (128, 64, 16, 4, 2, 8, 128)), 
    # (28000, 3, 128): ((64, 32, 32, 4, 2, 4, 96), (128, 64, 16, 8, 2, 8, 128)), 
    
    # (2000, 32, 128): ((32, 32, 32, 4, 2, 4, 128), (128, 16, 32, 4, 2, 8, 128)), 
    # (2500, 32, 128): ((32, 32, 32, 4, 2, 4, 96), (128, 16, 32, 8, 2, 8, 128)), 
    # (2943, 32, 128): ((32, 32, 32, 4, 2, 4, 128), (128, 16, 32, 4, 2, 8, 168)), 
    # (3500, 32, 128): ((32, 32, 32, 4, 2, 4, 96), (128, 16, 16, 4, 2, 4, 96)), 
    # (8000, 32, 128): ((32, 32, 32, 4, 2, 4, 168), (128, 16, 16, 4, 2, 4, 128)), 
    # (10000, 32, 128): ((32, 32, 32, 4, 2, 4, 128), (128, 32, 16, 8, 2, 4, 196)), 
    # (11772, 32, 128): ((64, 64, 16, 8, 4, 4, 255), (128, 16, 16, 8, 4, 4, 196)), 
    # (14000, 32, 128): ((32, 32, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)), 
    # (18000, 32, 128): ((32, 32, 32, 4, 2, 4, 96), (128, 16, 16, 4, 4, 4, 96)), 
    # (24000, 32, 128): ((64, 32, 32, 4, 4, 4, 96), (128, 16, 16, 4, 2, 4, 96)), 
    # (28000, 32, 128): ((32, 32, 32, 4, 2, 4, 128), (128, 16, 16, 4, 4, 4, 128)), 
    
    # (2000, 256, 128): ((32, 32, 32, 8, 4, 4, 255), (128, 16, 32, 4, 4, 8, 96)), 
    # (2500, 256, 128): ((32, 64, 32, 4, 2, 4, 96), (128, 16, 32, 4, 4, 8, 96)), 
    # (2827, 256, 128): ((32, 64, 32, 4, 2, 4, 168), (128, 16, 32, 4, 4, 8, 96)), 
    # (3500, 256, 128): ((32, 64, 32, 4, 2, 4, 255), (128, 16, 32, 4, 4, 4, 128)), 
    # (8000, 256, 128): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 4, 4, 4, 96)), 
    # (10000, 256, 128): ((64, 128, 32, 4, 2, 4, 255), (128, 32, 32, 4, 2, 4, 196)), 
    # (11308, 256, 128): ((64, 256, 32, 4, 4, 8, 128), (128, 32, 32, 4, 2, 4, 128)), 
    # (14000, 256, 128): ((64, 64, 32, 4, 4, 4, 96), (128, 32, 32, 8, 2, 4, 96)),  
    # (18000, 256, 128): ((64, 256, 32, 4, 2, 8, 128), (128, 32, 32, 4, 4, 4, 168)), 
    # (24000, 256, 128): ((64, 256, 32, 4, 2, 8, 128), (128, 32, 32, 4, 2, 4, 128)), 
    # (28000, 256, 128): ((64, 256, 32, 8, 2, 8, 128), (128, 16, 16, 4, 4, 4, 128)), 
    
    ### LARGE INPUTS:
    (60000, 8, 128): ((64, 32, 32, 4, 4, 4, 96), (128, 64, 16, 8, 4, 8, 128)),
    (80000, 8, 128): ((64, 32, 32, 8, 2, 8, 96), (128, 64, 16, 8, 2, 8, 128)),
    (100000, 8, 128): ((64, 32, 32, 4, 4, 8, 168), (128, 64, 16, 8, 2, 8, 128)),
    (120000, 8, 128): ((64, 32, 32, 4, 2, 8, 168), (128, 64, 16, 4, 2, 8, 128)),
    (147456, 8, 128): ((128, 32, 32, 8, 4, 8, None), (64, 64, 16, 8, 4, 8, None)),  

    (60000, 64, 128): ((64, 64, 32, 8, 2, 4, 96), (128, 16, 16, 8, 2, 4, 96)),
    (80000, 64, 128): ((64, 64, 32, 4, 2, 4, 128), (128, 16, 16, 8, 4, 4, 128)),
    (100000, 64, 128): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)),
    (120000, 64, 128): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)),
    (147456, 64, 128): ((64, 64, 32, 8, 4, 4, None), (128, 64, 32, 8, 4, 4, None)),

    (60000, 128, 128): ((64, 128, 32, 4, 2, 4, 255), (128, 16, 16, 8, 4, 4, 128)),
    (80000, 128, 128): ((64, 128, 32, 4, 4, 4, 128), (128, 16, 16, 8, 4, 4, 128)),
    (100000, 128, 128): ((64, 128, 32, 4, 2, 4, 128), (128, 32, 32, 4, 2, 4, 128)),
    (120000, 128, 128): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 168)),
    (147456, 128, 128): ((64, 128, 32, 8, 4, 4, None), (128, 64, 32, 8, 4, 4, None)), 
    
    (60000, 64, 64): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 4, 2, 4, 128)), 
    (80000, 64, 64): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)),
    (100000, 64, 64): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)),
    (120000, 64, 64): ((64, 64, 32, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)),
    (147456, 64, 64): ((64, 64, 16, 4, 2, 4, 255), (128, 16, 16, 8, 4, 4, 168)),
    (589824, 64, 64): ((64, 64, 32, 8, 2, 4, 96), (128, 16, 16, 8, 4, 4, 168)), 
    
    (40000, 512, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 64, 8, 4, 4, 255)),
    (60000, 512, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 32, 64, 4, 4, 4, 255)),
    (80000, 512, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (100000, 512, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 32, 64, 8, 2, 4, 255)),
    (120000, 512, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 64, 32, 4, 4, 8, 255)),
    (147456, 512, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 32, 4, 4, 4, 255)),  

    (40000, 512, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (60000, 512, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (80000, 512, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (100000, 512, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (120000, 512, 128): ((64, 256, 32, 4, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (147456, 512, 128): ((64, 256, 32, 4, 4, 4, 255), (256, 32, 32, 4, 2, 4, 255)), 
    
    (40000, 1024, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (60000, 1024, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 8, 4, 4, 255)),
    (80000, 1024, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (100000, 1024, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (120000, 1024, 128): ((64, 256, 32, 8, 4, 4, 255), (256, 32, 32, 4, 4, 4, 255)),
    (147456, 1024, 128): ((128, 128, 32, 8, 4, 8, 128), (256, 64, 32, 4, 2, 8, 128)),
    
    (40000, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 32, 32, 4, 2, 8, 128)), 
    (60000, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 32, 32, 4, 4, 8, 128)), 
    (80000, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)), 
    (100000, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 2, 8, 128)), 
    (120000, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)), 
    (147456, 516, 64): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)), 
    
    # investigate
    # (40000, 516, 128): ((128, 64, 16, 4, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)), 
    # (60000, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 2, 8, 128)),
    # (80000, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 8, 2, 8, 128)), 
    # (100000, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 4, 4, 8, 128)), 
    # (120000, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 8, 2, 8, 128)), 
    # (147456, 516, 128): ((128, 64, 16, 8, 4, 4, 128), (128, 64, 16, 8, 2, 8, 128)),
    
    (60000, 320, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 32, 8, 4, 4, 255)),
    (80000, 320, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 32, 16, 8, 4, 8, 128)),
    (100000, 320, 64): ((64, 128, 32, 8, 2, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (120000, 320, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 32, 8, 4, 4, 255)),
    (147456, 320, 64): ((64, 128, 32, 4, 2, 4, 128), (256, 32, 16, 4, 4, 8, 128)), 

    (60000, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (80000, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (100000, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (120000, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)),
    (147456, 640, 128): ((64, 128, 32, 8, 4, 4, 128), (256, 32, 32, 4, 4, 4, 255)), 

    (60000, 16, 128): ((128, 32, 32, 4, 2, 4, 96), (128, 16, 16, 8, 2, 4, 255)),
    (80000, 16, 128): ((64, 32, 32, 4, 2, 4, 96), (128, 16, 16, 8, 2, 4, 96)),
    (100000, 16, 128): ((128, 32, 32, 4, 4, 8, None), (128, 64, 16, 8, 2, 4, None)),

    (120000, 16, 128): ((64, 32, 32, 4, 2, 4, 96), (128, 16, 16, 8, 2, 4, 128)),
    (123930, 16, 128): ((64, 32, 16, 4, 4, 4, 128), (128, 16, 16, 8, 2, 4, 96)),
    (138510, 16, 128): ((128, 32, 32, 4, 2, 4, 128), (128, 32, 16, 8, 2, 4, 128)),    
    (147456, 16, 128): ((128, 32, 32, 4, 4, 8, None), (64, 64, 16, 8, 2, 4, None)),  

    (158922, 16, 128): ((64, 64, 16, 8, 4, 4, 168), (128, 32, 16, 8, 2, 4, 128)), 
    (174960, 16, 128): ((64, 32, 32, 4, 4, 4, 128), (128, 32, 16, 8, 2, 4, 128)),
    (189540, 16, 128): ((128, 32, 32, 4, 4, 4, 128), (128, 32, 16, 4, 2, 4, 128)),
    (233280, 16, 128): ((64, 32, 32, 4, 2, 4, 168), (128, 32, 16, 8, 2, 4, 128)), 
    (320760, 16, 128): ((128, 32, 32, 4, 2, 4, 168), (128, 32, 16, 8, 2, 4, 128)), 
    (408240, 16, 128): ((128, 32, 32, 4, 2, 4, 128), (128, 16, 16, 8, 2, 4, 128)), 
    (495720, 16, 128): ((64, 64, 16, 4, 2, 4, 255), (128, 32, 16, 8, 2, 4, 128)),
    (554040, 16, 128): ((128, 32, 32, 4, 4, 4, 168), (128, 64, 16, 4, 4, 8, 128)),
    (635688, 16, 128): ((128, 32, 32, 4, 2, 4, 128), (128, 32, 16, 8, 2, 4, 128)),
    (699840, 16, 128): ((128, 32, 32, 4, 2, 4, 168), (128, 64, 16, 8, 4, 8, 128)),
    (758160, 16, 128): ((128, 32, 32, 4, 2, 4, 168), (128, 64, 16, 8, 4, 8, 128)),
    
    (58320, 4, 16): ((64, 32, 16, 4, 2, 4, 168), (128, 16, 16, 8, 2, 4, 96)), 
    (80190, 4, 16): ((64, 32, 16, 4, 2, 4, 168), (128, 16, 16, 4, 2, 4, 168)), 
    (102060, 4, 16): ((128, 32, 16, 8, 2, 4, 255), (128, 16, 16, 4, 2, 4, 128)), 
    (123930, 4, 16): ((64, 32, 16, 8, 2, 4, 168), (128, 16, 16, 4, 4, 4, 168)),
    (138510, 4, 16): ((128, 32, 16, 4, 2, 4, 168), (128, 16, 16, 4, 4, 4, 128)),
    (158922, 4, 16): ((64, 64, 16, 8, 4, 4, 168), (128, 32, 16, 8, 2, 4, 128)), 
    (174960, 4, 16): ((128, 32, 16, 4, 2, 4, 96), (128, 16, 16, 4, 2, 4, 128)),
    (189540, 4, 16): ((128, 32, 16, 4, 4, 4, 96), (128, 16, 16, 8, 2, 4, 128)),
    (233280, 4, 16): ((128, 32, 16, 4, 2, 4, 96), (128, 16, 16, 8, 4, 4, 128)), 
    (320760, 4, 16): ((128, 32, 16, 4, 2, 4, 96), (128, 16, 16, 8, 2, 4, 128)), 
    (408240, 4, 16): ((128, 32, 16, 4, 4, 4, 96), (128, 16, 16, 4, 4, 4, 128)), 
    (495720, 4, 16): ((128, 32, 16, 4, 2, 4, 96), (128, 16, 16, 4, 4, 4, 128)),
    (554040, 4, 16): ((128, 32, 16, 8, 4, 4, 96), (128, 16, 16, 4, 2, 4, 128)),
    (635688, 4, 16): ((64, 32, 16, 4, 2, 4, 168), (128, 16, 16, 4, 2, 4, 128)),
    (699840, 4, 16): ((128, 32, 16, 8, 4, 4, 96), (128, 16, 16, 8, 2, 4, 128)),
    (758160, 4, 16): ((128, 32, 16, 4, 2, 4, 96), (128, 16, 16, 4, 2, 4, 128)),
}

def calculate_config_layernorm_linear(M, N, K, mode):
    """
    Return optimal config for input sizes: BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, GROUP_SIZE_M, num_stages, num_warps, maxnreg
    
    mode: 0=fwd; 1=bwd; 2=fwd+bwd
    """
    res = common_inputs.get((M, N, K), None)
    if res is not None:
        return res[mode] if mode < 2 else res 
    
    m_list = m_list_for_nk.get((N, K), None)
    
    # handle (n, k) not exist 
    if m_list is None:
        return None
    
    closest_m = get_closest(M, m_list)
    
    # M not supported in m_list 
    if closest_m is None:
        return None
    
    res = structured_maps[(closest_m, N, K)]
    return res[mode] if mode < 2 else res 
    

def get_closest(length, choices):    
    LOWER_MARGIN = 0.15 # if not covered by choices 
    if length < choices[0] * (1-LOWER_MARGIN):
        return None 
    
    if length > choices[-1]:
        return choices[-1]

    # Initialize pointers for binary search
    left, right = 0, len(choices) - 1

    # Perform binary search to find the closest value
    while left < right:
        mid = (left + right) // 2
        if choices[mid] < length:
            left = mid + 1
        else:
            right = mid

    # After the loop, left == right, and we need to check the closest between choices[left] and choices[left - 1]
    if left == 0:
        return choices[left]
    if left == len(choices):
        return choices[-1]
    if abs(choices[left] - length) < abs(choices[left - 1] - length):
        return choices[left]
    else:
        return choices[left - 1]